********************************************************************************
*                         TWITTER API ME 1.2 - READ ME                         *
********************************************************************************
*                         http://www.twitterapime.com                          *
********************************************************************************

 DESCRIPTION:
********************************************************************************
Twitter API ME defines a compelling and well defined API for Java developers
who wish to access Twitter's services. This project provides support for the
main and more popular services on Twitter, e.g., searching and "tweet" posting.
More services are added as new versions are released.

Twitter API ME is defined in such a way that developers will learn how to use it
quickly. In addition, the API is structured to work regardless of the underlying
Java platform (e.g. Java ME and Android), in order to make easier and quicker
for the developers to port their applications to other platforms.

 MINIMUM REQUIREMENTS:
********************************************************************************
+ Runtime Environment
  - Java ME: MIDP 2.0 / CLDC 1.0
  - Android 1.1

+ Development Environment
  - Java SDK 1.6
  - Java ME platform SDK 3.0, WTK 2.5.2 or any other compatible Java ME SDK
  - Android SDK 1.1 or newer.
  - Java Preprocessor (e.g. Antenna Preprocessor Plug-in for Eclipse)
  - Sony Ericsson Mobile JUnit 1.0 (for Java ME unit testing)
  
+ Build Environment
  - Apache Ant 1.7.1
  - Antenna 1.2 (for Java ME build only)
  - Findbugs 1.3.9 (optional)

 AVAILABLE IN THIS VERSION:
********************************************************************************
- Retweet.
- Direct message posting and retrieval.
- Friendship management, i.e., follow/unfollow and block/unblock.
- Access to Public, Home, User and Mentions timelines.
- Rate limit status access for Search API.
- Some bug fixes and optimizations.

 KNOWN BUGS IN THIS VERSION:
********************************************************************************
- None

 REMARKS:
********************************************************************************
- In this version 1.2 we had to make a change in some methods signatures that
  will cause incompatibility with some codes written with the previous versions
  of this API. However, we advance those incompatibilities are easy and quick to
  fix.
  
  This change consists that every method that directly access Twitter API has to
  throw a LimitExceededException exception, even if Twitter says the opposite.
  Our objective is to be prepared just in case, in the future, Twitter API
  decides to change regarding rating or not a given service.
  
  The methods affected by this change are TweetER.post(),
  AccountManager.verifyCredential() and AccountManager.getRateStatusLimit(). In
  order to fix this incompatibility, you just need to catch the
  LimitExceededException exception. That's it!
  
  We apologize for this inconvenience and appreciate your comprehension.

 COMING NEXT VERSION: 1.3
********************************************************************************
- Authentication via OAuth.
- Trends.
- Followers list.
- Find people.
- Much more... Let us know what you need.

 BUILD ENVIRONMENT SETUP:
********************************************************************************
- In order for you to be able to build this project, the following build
  properties value (build.properties) must be defined according to your
  environment: 

wtk.home=<Java ME SDK PATH>
tapime.path.lib.midp20=${wtk.home}/<MIDP 2.0 JAR PATH>
tapime.path.lib.cldc10=${wtk.home}/<CLDC 1.0 JAR PATH>
tapime.path.lib.antenna=<ANTENNA JAR PATH>
tapime.path.findbugs=<FINDBUGS HOME DIR PATH>
tapime.path.lib.findbugs=<FINDBUGS ANT JAR PATH>
tapime.path.lib.android11=<ANDROID 1.1 JAR PATH>
tapime.path.lib.junit=<JUnit 3.8.1 JAR PATH>
tapime.path.lib.mobilejunit=<Mobile JUnit JAR PATH>

 PREPROCESSOR DIRECTIVES:
********************************************************************************
- If you intend to work with the API's source code directly, you need to know
  that this code contains some preprocessing directives, in order to manage the
  proper compilation for each target platform. Currently, the code is prepared
  for Java ME and Android, since they are target platforms of Twitter API ME.
  
  Before compiling the source code, you need to specify which platform this
  compilation is for in your IDE. For instance, you can use Antenna Preprocessor
  Plug-in for Eclipse for that. In case you want to compile for Java ME, use the
  directive PP_JAVA_ME. For Android, use PP_ANDROID. Otherwise, your binaries
  may present some strange behaviors during runtime.
  
 HEADS-UP ON OBFUSCATION:
********************************************************************************
- Just in case you decide to obfuscate Twitter API ME along with your
  application, there is something you need to know firstly. Internally, some
  classes are instantiated using reflection and this way, they cannot be
  obfuscated at all. Otherwise, you will get some unexpected behaviors, e.g.,
  NullPointerException.
  
  To avoid that and obfuscate you application properly, you need to specify in
  your obfuscation tool, to keep the following classes unmodified:
  - impl.javame.com.twitterapime.io.HttpConnectionImpl
  - impl.android.com.twitterapime.io.HttpConnectionImpl
  - impl.javame.com.twitterapime.parser.KXML2Parser
  - impl.android.com.twitterapime.io.HttpConnectionImpl